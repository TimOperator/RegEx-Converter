/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package de.hamp_it.regex_converter;

import java.awt.Color;
import java.awt.Toolkit;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Scanner;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Tim
 */
public final class ColorJFrame extends javax.swing.JFrame {

    
    private final List colorMap;
    private final DefaultListModel<String> lm;
    /**
     * Creates new form ColorJFrame
     */
    public ColorJFrame() {
        initComponents();
        this.setLocationRelativeTo(null);
        setIcon();
        colorMap = new ArrayList<>();
        loadColorMapFromFile("colors.properties");
        lm = new DefaultListModel<>();
        colorList.setModel(lm);
        this.updateColorList();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        colorList = new javax.swing.JList<>();
        deleteColorButton = new javax.swing.JButton();
        addColorButton = new javax.swing.JButton();
        editColorButton = new javax.swing.JButton();
        saveColorsButton = new javax.swing.JButton();
        myColorChooser = new javax.swing.JColorChooser();
        newColorTextField = new javax.swing.JTextField();

        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("interfaces"); // NOI18N
        setTitle(bundle.getString("title_color_palette")); // NOI18N
        setResizable(false);

        colorList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        colorList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                colorListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(colorList);

        deleteColorButton.setText(bundle.getString("button_delete")); // NOI18N
        deleteColorButton.setEnabled(false);
        deleteColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteColorButtonActionPerformed(evt);
            }
        });

        addColorButton.setText(bundle.getString("button_add")); // NOI18N
        addColorButton.setEnabled(false);
        addColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addColorButtonActionPerformed(evt);
            }
        });

        editColorButton.setText(bundle.getString("button_edit")); // NOI18N
        editColorButton.setEnabled(false);
        editColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editColorButtonActionPerformed(evt);
            }
        });

        saveColorsButton.setText(bundle.getString("button_save")); // NOI18N
        saveColorsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveColorsButtonActionPerformed(evt);
            }
        });

        myColorChooser.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                myColorChooserPropertyChange(evt);
            }
        });
        myColorChooser.addVetoableChangeListener(new java.beans.VetoableChangeListener() {
            public void vetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {
                myColorChooserVetoableChange(evt);
            }
        });

        newColorTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                newColorTextFieldKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(editColorButton)
                        .addGap(18, 18, 18)
                        .addComponent(deleteColorButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(newColorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addColorButton))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(myColorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 607, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(saveColorsButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteColorButton)
                    .addComponent(addColorButton)
                    .addComponent(editColorButton)
                    .addComponent(newColorTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(myColorChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveColorsButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveColorsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveColorsButtonActionPerformed
        createColorFile();
        this.setVisible(false);
    }//GEN-LAST:event_saveColorsButtonActionPerformed

    private void colorListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_colorListValueChanged
        //Set color
        int index = colorList.getSelectedIndex();
        if (index >= 0) {
            deleteColorButton.setEnabled(true);
            editColorButton.setEnabled(true);
            String colorCode = getColorCode(lm.getElementAt(index));
            Color currentColor;
            if (colorCode == null) {
                currentColor = myColorChooser.getColor();
            } else {
                currentColor = Color.decode(colorCode.toLowerCase());
            }
            myColorChooser.setColor(currentColor);
        } else {
            deleteColorButton.setEnabled(false);
            editColorButton.setEnabled(false);
        }
        
    }//GEN-LAST:event_colorListValueChanged

    private void myColorChooserVetoableChange(java.beans.PropertyChangeEvent evt)throws java.beans.PropertyVetoException {//GEN-FIRST:event_myColorChooserVetoableChange
        
    }//GEN-LAST:event_myColorChooserVetoableChange

    private void myColorChooserPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_myColorChooserPropertyChange
        Color tmp = myColorChooser.getColor();
        System.out.println(tmp.getRed() + " " + tmp.getGreen() + " " + tmp.getBlue());
    }//GEN-LAST:event_myColorChooserPropertyChange

    private void newColorTextFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_newColorTextFieldKeyReleased
        if (newColorTextField.getText().trim().length() <= 0) {
            addColorButton.setEnabled(false);
        } else {
            addColorButton.setEnabled(true);
        }
    }//GEN-LAST:event_newColorTextFieldKeyReleased

    private void addColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addColorButtonActionPerformed
        String colorName = newColorTextField.getText().trim();
        for (int i = 0; i < colorMap.size(); i++) {
            MyColor myColor = (MyColor) colorMap.get(i);
            if (myColor.getColorName().equalsIgnoreCase(colorName)) {
                JOptionPane.showMessageDialog(null, "Color " + colorName + " already exists.");
                return;
            }
        }
        lm.addElement(colorName);
        colorMap.add(new MyColor(colorName, Integer.toString(myColorChooser.getColor().getRGB())));
        
    }//GEN-LAST:event_addColorButtonActionPerformed

    private void deleteColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteColorButtonActionPerformed
        int index = colorList.getSelectedIndex();
        if (index >= 0) {
            MyColor myColor;
            for (int i = 0; i < colorMap.size(); i++) {
                myColor = (MyColor) colorMap.get(i);
                if (myColor.getColorName().equals(lm.get(index))) {
                    colorMap.remove(i);
                }
            }
        }
        updateColorList();
    }//GEN-LAST:event_deleteColorButtonActionPerformed

    private void editColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editColorButtonActionPerformed
        int index = colorList.getSelectedIndex();
        if (index >= 0) {
            String colorName = lm.get(index);
            MyColor myColor;
            for (int i = 0; i < colorMap.size(); i++) {
                myColor = (MyColor) colorMap.get(i);
                if (myColor.getColorName().equals(colorName)) {
                    myColor.setColorCode(Integer.toString(myColorChooser.getColor().getRGB()));
                }
            }
        }
    }//GEN-LAST:event_editColorButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ColorJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ColorJFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addColorButton;
    private javax.swing.JList<String> colorList;
    private javax.swing.JButton deleteColorButton;
    private javax.swing.JButton editColorButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JColorChooser myColorChooser;
    private javax.swing.JTextField newColorTextField;
    private javax.swing.JButton saveColorsButton;
    // End of variables declaration//GEN-END:variables

    public HashMap getColorMap() {
        HashMap hashMap = new HashMap();
        for (int i = 0; i < colorMap.size(); i++) {
            MyColor myColor = (MyColor) colorMap.get(i);
            Color color = Color.decode(myColor.getColorCode());
            String colorHex = Integer.toHexString(color.getRGB()).substring(2).toUpperCase();
            System.out.println(myColor.getColorName() + ": "+ colorHex);
            hashMap.put(myColor.getColorName(), colorHex);
        }
        return hashMap;
    }
    
    private void loadColorMapFromFile(String filename) {
        //key = name
        //value = rgb

        colorMap.clear();
        File colorFile = new File(filename);
        Scanner scanner;
        try {
            scanner = new Scanner(colorFile);
            while (scanner.hasNextLine()) {
                String line = scanner.nextLine();
                if (line.contains("=")) {
                    String[] buffer = line.split("=");
                    String rgbKey = buffer[0];
                    String nameValue = buffer[1];
                    try {
                        // Datei mit Farbeinstellungen entspricht alter version (Version <= 5.1.3)
                        int color = Integer.parseInt(nameValue);
                        if (color >= 0) {
                            throw new NumberFormatException();
                        }
                    } catch (NumberFormatException ex) {
                        JOptionPane.showMessageDialog(null, "Ihre Datei mit den Farbeinstellungen ist veraltet und wird ersetzt.");
                        throw new FileNotFoundException();
                    }
                    colorMap.add(new MyColor(rgbKey, nameValue));
                }
            }
            scanner.close();
        } catch (FileNotFoundException ex) {
            colorMap.add(new MyColor("black", "-16777216"));
            colorMap.add(new MyColor("blue", "-16776961"));
            colorMap.add(new MyColor("green", "-16711936"));
            colorMap.add(new MyColor("cyan", "-16711681"));
            colorMap.add(new MyColor("red", "-65536"));
            colorMap.add(new MyColor("magenta", "-65281"));
            colorMap.add(new MyColor("yellow", "-256"));
            colorMap.add(new MyColor("white", "-1"));
            JOptionPane.showMessageDialog(null, "Neue Datei mit Farbeinstellungen wird erstellt!\r\nErstelle: colors.properties");
            createColorFile();
            //Logger.getLogger(SettingsJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void createColorFile() {
        try (Writer writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream("colors.properties"), "utf-8"))) {
            writer.write("#Add further colors with name and rgb-value like below\r\n");
            for (int i=0; i<colorMap.size(); i++) {
                writer.write(colorMap.get(i).toString() + "\r\n");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Could not save color.properties: " + e.toString());
        }
    }
    
    private void updateColorList() {
        lm.removeAllElements();
        for (int i = 0; i < colorMap.size(); i++) {
            String tmp = ((MyColor) colorMap.get(i)).getColorName();
            lm.addElement(tmp);
        }
    }
    
    private String getColorCode(String colorName) {
        MyColor myColor;
        for (int i = 0; i < colorMap.size(); i++) {
            myColor = ((MyColor) colorMap.get(i));
            if (myColor.getColorName().equals(colorName)) {
                return myColor.getColorCode();
            }
        }
        return null;
    }
    
    private void setIcon() {
        setIconImage(Toolkit.getDefaultToolkit().getImage(getClass().getClassLoader().getResource("convicon.png")));
    }

    private int Integer(float f) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
    private class MyColor {
        private String colorName;
        private String colorCode;
        
        public MyColor(String name, String code) {
            this.colorName = name;
            this.colorCode = code;
        }
        
        public void setColorName(String name) {
            this.colorName = name;
        }
        
        public void setColorCode(String code) {
            this.colorCode = code;
        }
        
        public String getColorName() {
            return colorName;
        }
        
        public String getColorCode() {
            return colorCode;
        }
        
        @Override
        public String toString() {
            return colorName + "=" + colorCode;
        }
    }
}
